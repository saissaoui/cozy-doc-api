// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package mocks

import (
	json "encoding/json"

	mock "github.com/stretchr/testify/mock"
)

// CouchDbClient is an autogenerated mock type for the CouchDbClient type
type CouchDbClient struct {
	mock.Mock
}

// CreateDatabase provides a mock function with given fields: name
func (_m *CouchDbClient) CreateDatabase(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertDocument provides a mock function with given fields: doc, database
func (_m *CouchDbClient) InsertDocument(doc json.RawMessage, database string) error {
	ret := _m.Called(doc, database)

	var r0 error
	if rf, ok := ret.Get(0).(func(json.RawMessage, string) error); ok {
		r0 = rf(doc, database)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ping provides a mock function with given fields:
func (_m *CouchDbClient) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewCouchDbClientT interface {
	mock.TestingT
	Cleanup(func())
}

// NewCouchDbClient creates a new instance of CouchDbClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCouchDbClient(t NewCouchDbClientT) *CouchDbClient {
	mock := &CouchDbClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
